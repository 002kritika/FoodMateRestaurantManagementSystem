generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique
  name                     String?
  password                 String
  role                     Role      @default(USER)
  isVerified               Boolean   @default(false)
  verificationToken        String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  menus                    Menu[] // Many-to-many relationship with Menu
  orders                   Order[] // Orders placed by the user
  staff                    Staff? // One-to-one relationship with Staff
  isAdmin                  Boolean   @default(false) // Admin flag
}

model Staff {
  id     Int    @id @default(autoincrement())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Admin {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  menu      Menu     @relation(fields: [menuId], references: [id])
  menuId    Int // Changed to Int to match Menu.id
  total     Float
  status    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    MenuCategory
  imageURL    String?
  orders      Order[] // One-to-many relationship with Order
  users       User[] // Many-to-many relationship with User
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum MenuCategory {
  APPETIZER
  MAIN_COURSE
  DESSERT
  BEVERAGE
}

enum Role {
  USER
  STAFF
  ADMIN // Added ADMIN role
}
