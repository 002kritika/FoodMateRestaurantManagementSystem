generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  name               String?
  password           String
  role               Role     @default(USER)
  isVerified         Boolean  @default(false)
  verificationToken  String?
  verificationSentAt DateTime? // Timestamp of when the verification email was sent
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  resetPasswordToken String?  
  resetPasswordTokenExpiry DateTime? 
  refreshToken       RefreshToken[]
  orders             Order[]   // Orders placed by the user
  staff              Staff?
  isAdmin            Boolean  @default(false)  // Admin flag
  cartItems          Cart[]   
  wishlist           Wishlist[]
  customers          Customer[]
  Payment Payment[]
  reservations   Reservation[]

}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String   @unique
  dob       DateTime
  gender    String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @unique
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  token  String @unique
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Staff {
  id       Int    @id @default(autoincrement())
  name     String
  user     User   @relation(fields: [userId], references: [id])
  userId   Int    @unique
}

model Admin {
  id       Int   @id @default(autoincrement())
  email    String   @unique
  name     String?
  password String
}
model Reservation {
  id      Int      @id @default(autoincrement())
  name    String
  email   String
  phone   String
  date    String   // Store date as String (e.g., "2025-03-12")
  time    String   // Store time as "HH:mm"
  service String
  status  String
  user    User     @relation(fields: [userId], references: [id])
  userId  Int      
  @@unique([date, time]) // Prevent duplicate bookings for the same time slot
  createdAt DateTime @default(now()) // <--- Add this line

}
model Menu {
  id            String        @id @default(uuid())
  name          String
  description   String?
  price         Float
  category      MenuCategory
  available     Boolean       @default(true)
  imageUrl      String?
  orders        OrderItem[]   // Orders associated with menu items
  cartItems     Cart[] 
  wishlist      Wishlist[] 
  isPopular     Boolean  @default(false) 
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  menuId    String
  menu      Menu    @relation(fields: [menuId], references: [id])
  quantity  Int     @default(1)
  @@unique([userId, menuId]) // Ensures a user can only have one cart entry per menu item
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  menuId    String   // Change from Int to String
  user      User     @relation(fields: [userId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, menuId])
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int      // Foreign key
  totalAmount     Float
  paymentMethod   String
  address         String?
  orderType       String
  status          String
  deliveryCharge  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])  // Add this line to define the opposite relation
  items           OrderItem[]

  Payment Payment[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  menuId    String  // Changed productId to menuId for consistency
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu      Menu    @relation(fields: [menuId], references: [id])
}

model Payment {
  id              Int           @id @default(autoincrement())
  transactionUuid String        @unique       // Unique identifier from the payment request
  amount          Float
  method         String   // 'Esewa', 'COD', etc.

  status          PaymentStatus @default(PENDING)
  responseUrl     String?                       // URL from eSewa response (if applicable)
  rawResponse     Json?                         // Optional: to store complete payment gateway response
  // Relations (optional, adjust based on your business logic)
  user            User?         @relation(fields: [userId], references: [id])
  userId          Int?
  order           Order?        @relation(fields: [orderId], references: [id])
  orderId         Int?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
enum MenuCategory {
  APPETIZER
  MAIN_COURSE
  DESSERT
  BEVERAGE
}

enum Role {
  USER
  STAFF
}

enum OrderType {
  PICKUP
  DELIVERY
}
enum OrderStatus {
  PENDING
  PREPARED
  COMPLETED
  CANCELED
  DELIVERED
}
